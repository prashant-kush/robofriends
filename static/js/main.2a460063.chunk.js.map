{"version":3,"sources":["Card.js","cardlist.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","alt","src","concat","this","props","id","name","email","Component","CardList","_ref","Robots","cardcomponent","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","value","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","state","_this2","fetch","then","response","json","_this3","filterRobots","filter","toLowerCase","includes","length","src_SearchBox","src_Scroll","cardlist","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMAoBeA,mLAXb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA2BC,KAAKC,MAAMC,GAAtC,cACrBT,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKK,KAAKC,MAAME,MAChBV,EAAAC,EAAAC,cAAA,SAAIK,KAAKC,MAAMG,gBATDC,aCOJC,EATA,SAAAC,GACf,IADiBC,EACjBD,EADiBC,OAEVC,EAAcD,EAAOE,IAAI,SAACC,EAAKC,GAAM,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMC,IAAMF,EAAGV,GAAIM,EAAOI,GAAGV,GAAIC,KAAMK,EAAOI,GAAGT,KAAMC,MAAOI,EAAOI,GAAGR,UACvH,OACCX,EAAAC,EAAAC,cAAA,WACAc,ICMUM,EAXC,SAAAR,GAChB,IADkBS,EAClBT,EADkBS,YAAaC,EAC/BV,EAD+BU,aAE9B,OACCxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACfH,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,SAASC,YAAY,gBAAgBC,MAAOJ,EAAaK,SAAUJ,MCIlEK,SARF,SAACrB,GAEb,OACCR,EAAAC,EAAAC,cAAA,OAAK4B,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UACjEzB,EAAM0B,YC4CKC,cA1Cd,SAAAA,IACA,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA9B,KAAA4B,IACCC,EAAAC,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlC,QAeDmC,eAAe,SAACC,GAEfP,EAAKQ,SAAS,CAACrB,YAAaoB,EAAME,OAAOlB,SAhBzCS,EAAKU,MACL,CACC/B,OAAQ,GACRQ,YAAa,IALfa,mFAUA,IAAAW,EAAAxC,KACCyC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAA/B,GAAI,OAAG6B,EAAKH,SAAS,CAAC7B,OAAQG,uCAO7B,IAAAkC,EAAA7C,KACD8C,EAAa9C,KAAKuC,MAAM/B,OAAOuC,OAAO,SAAAvC,GAC1C,OAAQA,EAAOL,KAAK6C,cAAcC,SAASJ,EAAKN,MAAMvB,YAAYgC,iBACpE,OAA8B,IAA3BhD,KAAKuC,MAAM/B,OAAO0C,OAEbzD,EAAAC,EAAAC,cAAA,qBAKRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACwD,EAAD,CAAWlC,aAAcjB,KAAKmC,iBAC9B1C,EAAAC,EAAAC,cAACyD,EAAD,KACA3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAU7C,OAAQsC,aArCFzC,aCKEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OACRnE,EAAAC,EAAAC,cAACkE,EAAD,MACEC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.2a460063.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\n\n\n\nclass Card extends Component\n{\n\trender()\n\t{\n\t\treturn(\n\t\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t\t<img alt=\"robots\" src= {`https://robohash.org/${this.props.id}?200*200`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{this.props.name}</h2>\n\t\t\t\t\t<p>{this.props.email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList=({Robots})=>\n{\n\tconst cardcomponent=Robots.map((user,i) =>{return <Card key ={i} id={Robots[i].id} name={Robots[i].name} email={Robots[i].email}/> })\n    return (\n    \t<div>\n    {cardcomponent}\n\t</div>\n\t\t);\n}\nexport default CardList;","import React from \"react\";\n\n\nconst SearchBox=({searchfield, searchChange})=>\n{\n\treturn(\n\t\t<div className=\"pa2 dib b--green bg-lightest-blue\">\n\t\t<input type=\"search\" placeholder=\"search Robots\" value={searchfield} onChange={searchChange}/>\n\t\t</div>\n\t\t);\n}\n\n\n\nexport default SearchBox;","import React from \"react\";\n\n\nconst Scroll=(props)=>\n{\n\treturn(\n\t\t<div style={{overflowY: 'scroll' ,border:'1px solid black' ,height:'550px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t);\n}\nexport default Scroll;","import React , {Component}from \"react\";\nimport CardList from \"./cardlist\";\n\nimport SearchBox from \"./SearchBox.js\";\nimport \"./app.css\";\nimport Scroll from \"./Scroll\";\n\nclass App extends Component\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state=\n\t\t{\n\t\t\tRobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then(response=> response.json())\n\t\t.then(user=> this.setState({Robots: user}));\n\t}\n\n\tonSearchChange=(event)=>\n\t{\n\t\tthis.setState({searchfield: event.target.value});\n\t}\n\trender(){\n\t\tconst filterRobots=this.state.Robots.filter(Robots =>\n\t\t\t{return (Robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()));});\n\t\tif(this.state.Robots.length===0)\n\t\t{\n\t\t\treturn(<h1>Loading</h1>\n\t\t\t\t);\n\t\t}\n\t\telse{\n\treturn(\n\t\t<div className=\"tc\">\n\t\t<h1>RoboFriends</h1>\n\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t<Scroll>\n\t\t<CardList Robots={filterRobots} />\n\t\t</Scroll>\n\t\t</div>) ;\n}\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport \"./index.css\";\n\n\nReactDOM.render(\n\t<App/>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}